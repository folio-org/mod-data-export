#%RAML 1.0

title: Data export
version: v1.0
protocols: [ HTTP, HTTPS ]
baseUri: http://localhost

documentation:
  - title: Data export API
    content: API for exporting MARC records

types:
  errors: !include raml-util/schemas/errors.schema
  fileDefinition: !include schemas/fileDefinition.json
  exportRequest: !include schemas/exportRequest.json
  jobExecutionCollection: !include schemas/jobExecutionCollection.json
  jobExecution: !include schemas/jobExecution.json

traits:
  validate: !include raml-util/traits/validation.raml
  pageable:  !include raml-util/traits/pageable.raml
  searchable: !include raml-util/traits/searchable.raml
  language: !include raml-util/traits/language.raml

resourceTypes:
  collection: !include raml-util/rtypes/collection-get.raml

/data-export:
  /export:
    displayName: Export manager service
    description: Method to start export for MARC records
    post:
      description: Starts the export process
      is: [validate]
      body:
        application/json:
          type: exportRequest
      responses:
        204:
        400:
          description: "Bad request"
          body:
             text/plain:
               example: "Bad request"
        422:
          description: "Unprocessable Entity"
          body:
            application/json:
              type: errors
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error"
  /jobExecutions:
    displayName: JobExecutions
    description: API for getting JobExecutions by query
    type:
      collection:
        schemaCollection: jobExecutionCollection
        exampleCollection: !include samples/jobExecutionCollection.sample
    get:
      is: [
        searchable: {
        description:
          "with valid searchable fields", example: "status=SUCCESS"
        },
        pageable,
        validate
      ]
  /fileDefinitions:
    displayName: File upload service
    description: Service provides file uploading API
    post:
      description: Method to create file definition to use it for the file uploading
      is: [validate]
      body:
        application/json:
          type: fileDefinition
      responses:
        201:
          body:
            application/json:
              type: fileDefinition
        400:
          description: "Bad request"
          body:
            text/plain:
              example: "Bad request"
        422:
          description: "Unprocessable Entity"
          body:
            application/json:
              type: errors
        500:
          description: "Internal server error"
          body:
            text/plain:
              example: "Internal server error"
    /{fileDefinitionId}:
      get:
        description: Method to get file definition by id
        responses:
          200:
            body:
              application/json:
                type: fileDefinition
          400:
            description: "Bad request"
            body:
              text/plain:
                example: "Bad request"
          404:
            description: "Not found"
            body:
              text/plain:
                example: "Not found"
          500:
            description: "Internal server error"
            body:
              text/plain:
                example: "Internal server error"
      /upload:
        post:
          description: Method to upload file
          body:
              application/octet-stream:
          responses:
            200:
              body:
                application/json:
                  type: fileDefinition
            400:
              description: "Bad request"
              body:
                text/plain:
                  example: "Bad request"
            404:
              description: "Not found"
              body:
                text/plain:
                  example: "Not found"
            500:
              description: "Internal server error"
              body:
                text/plain:
                  example: "Internal server error"
